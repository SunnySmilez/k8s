apiVersion: v1      #指定api版本
kind: Pod               #创建资源的角色/类型
metadata:               #资源的元数据/属性
  name: web01           #资源名称，必填
  labels:               #设定资源的标签
    test-label: demo
    version: v1
    kubernetes.io/cluster-service: "true"
  annotations:            #自定义注解列表
    name: test        #自定义注解名字
spec:                   #指定该资源的内容
  restartPolicy: Always #默认k8s的策略，在此容器退出后，会立即创建一个相同的容器
  nodeSelector:         #节点选择器
    zone: node1
  containers:           #容器信息
  - name: web01-pod
    image: sunnysmilez/php
    imagePullPolicy: Never      #三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略，
                                # Always，每次都检查
                                # Never，每次都不检查（不管本地是否有）
                                # IfNotPresent，如果本地有就不检查，如果没有就拉取
    command: ['sh'] #启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT
    args: ["$(str)"] #启动容器的命令参数，对应Dockerfile中CMD参数
    env: #指定容器中的环境变量
    - name: str #变量的名字
      value: "/etc/run.sh" #变量的值
    resources: #资源管理
      requests: #容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行
        cpu: 0.1 #CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）
        memory: 32Mi #内存使用量
      limits: #资源限制
        cpu: 0.5
        memory: 32Mi

    ports:
    - containerPort: 80 #容器开发对外的端口
      name: httpd  #名称
      protocol: TCP
    livenessProbe: #pod内容器健康检查的设置
      httpGet: #通过httpget检查健康，返回200-399之间，则认为容器正常
        path: / #URI地址
        port: 80
        scheme: HTTP
      initialDelaySeconds: 180 #表明第一次检测在容器启动后多长时间后开始
      timeoutSeconds: 5         #检测的超时时间
      periodSeconds: 15         #检查间隔时间
    lifecycle: #生命周期管理
      postStart:      #容器运行之前运行的任务
        exec:
          command:
            - 'sh'
            - 'echo "test">/tmp/1.txt'
      preStop:    #容器关闭之前运行的任务
        exec:
          command: ['service httpd stop']
    volumeMounts:
    - name: volume
      mountPath: /data
      readOnly: true
  volumes:
  - name: volume
    hostPath:
      path: /data   #挂载设备类型为hostPath，路径为宿主机下的data,这里设备类型支持很多种